import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Settings2, Thermometer, PipetteIcon, Scale, AlertTriangle, Download, Info } from 'lucide-react';

// Import the needed utils
import { initializePyodide, calculateParameters } from '../utils/pyodideLoader';
import { exportToCsv, generateReport } from '../utils/dataExport';
import { CalculationResults, ProcessParameters, ValidationError } from '../utils/calculatorTypes';

const InputField = ({ label, unit, icon: Icon, ...props }) => (
  <div className="space-y-2">
    <label className="flex items-center text-sm font-medium text-gray-700 dark:text-gray-300">
      <Icon className="w-4 h-4 mr-2" />
      {label}
    </label>
    <div className="relative">
      <Input {...props} className="pl-3 pr-12" />
      <span className="absolute right-3 top-1/2 -translate-y-1/2 text-sm text-gray-500">
        {unit}
      </span>
    </div>
  </div>
);

const ResultCard = ({ title, value, unit }) => (
  <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
    <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">{title}</h3>
    <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-white">
      {value} <span className="text-sm font-normal text-gray-500">{unit}</span>
    </p>
  </div>
);

const OptimizerPage = () => {
  // State for input parameters
  const [inputs, setInputs] = useState<ProcessParameters>({
    pipeLength: 100,
    pipeThickness: 20,
    temperature: 25,
    flowRate: 0.001,
    viscosity: 350,
    density: 1.12
  });

  // State for calculation results and status
  const [results, setResults] = useState<CalculationResults | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [pyodideReady, setPyodideReady] = useState<boolean>(false);

  // Initialize Pyodide when component mounts
  useEffect(() => {
    const loadPyodide = async () => {
      try {
        await initializePyodide();
        setPyodideReady(true);
      } catch (err) {
        console.error('Failed to initialize Pyodide:', err);
        setError('Failed to initialize Python environment. Please refresh the page and try again.');
      }
    };

    loadPyodide();
  }, []);

  // Handle input changes
  const handleInputChange = (name: keyof ProcessParameters, value: number) => {
    setInputs(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Calculate results
  const calculateResults = async () => {
    if (!pyodideReady) {
      setError('Python environment is not ready yet. Please wait a moment and try again.');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // Validate inputs
      if (inputs.pipeLength < 50) {
        throw new ValidationError("Pipe length must be at least 50mm");
      }
      if (inputs.pipeThickness <= 0) {
        throw new ValidationError("Pipe thickness must be positive");
      }
      if (inputs.temperature < 5 || inputs.temperature > 40) {
        throw new ValidationError("Temperature must be between 5°C and 40°C");
      }
      if (inputs.flowRate <= 0) {
        throw new ValidationError("Flow rate must be positive");
      }

      // Call Python calculation function
      const results = await calculateParameters(inputs);
      setResults(results);

      // Log the calculation for production tracking
      const logEntry = {
        timestamp: new Date().toISOString(),
        ...inputs,
        pressure: results.required_pressure,
        viscosity: results.apparent_viscosity,
        reynoldsNumber: results.reynolds_number
      };

      // Save to localStorage for the ProductionLogPage to access
      const savedLogs = localStorage.getItem('productionLogs');
      const logs = savedLogs ? JSON.parse(savedLogs) : [];
      logs.push(logEntry);
      localStorage.setItem('productionLogs', JSON.stringify(logs));

    } catch (err) {
      if (err instanceof ValidationError) {
        setError(err.message);
      } else {
        console.error('Calculation error:', err);
        setError(err instanceof Error ? err.message : 'Error performing calculations');
      }
    } finally {
      setLoading(false);
    }
  };

  // Export results as CSV
  const handleExport = () => {
    if (results) {
      exportToCsv(results);
    }
  };

  // Generate report
  const handleGenerateReport = () => {
    if (results) {
      const report = generateReport(results);
      const blob = new Blob([report], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'polyurethane_injection_report.txt';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="p-6">
      <Card className="border-t-4 border-t-blue-500">
        <CardHeader>
          <CardTitle className="text-2xl flex items-center gap-2">
            <Settings2 className="w-6 h-6" />
            Polyurethane Injection Optimizer
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InputField
                  label="Pipe Length"
                  unit="mm"
                  icon={Settings2}
                  type="number"
                  min="50"
                  value={inputs.pipeLength}
                  onChange={(e) => handleInputChange('pipeLength', Math.max(50, Number(e.target.value)))}
                />
                
                <InputField
                  label="Pipe Thickness"
                  unit="mm"
                  icon={Settings2}
                  type="number"
                  min="0.1"
                  step="0.1"
                  value={inputs.pipeThickness}
                  onChange={(e) => handleInputChange('pipeThickness', Math.max(0.1, Number(e.target.value)))}
                />

                <InputField
                  label="Temperature"
                  unit="°C"
                  icon={Thermometer}
                  type="number"
                  min="5"
                  max="40"
                  value={inputs.temperature}
                  onChange={(e) => handleInputChange('temperature', Number(e.target.value))}
                />

                <InputField
                  label="Flow Rate"
                  unit="L/s"
                  icon={Scale}
                  type="number"
                  min="0.0001"
                  step="0.0001"
                  value={inputs.flowRate}
                  onChange={(e) => handleInputChange('flowRate', Math.max(0.0001, Number(e.target.value)))}
                />

                <InputField
                  label="Initial Viscosity"
                  unit="cP"
                  icon={PipetteIcon}
                  type="number"
                  min="1"
                  value={inputs.viscosity}
                  onChange={(e) => handleInputChange('viscosity', Math.max(1, Number(e.target.value)))}
                />

                <InputField
                  label="Density"
                  unit="g/cm³"
                  icon={Scale}
                  type="number"
                  min="0.1"
                  step="0.01"
                  value={inputs.density}
                  onChange={(e) => handleInputChange('density', Math.max(0.1, Number(e.target.value)))}
                />
              </div>

              {!pyodideReady && (
                <Alert>
                  <Info className="h-4 w-4" />
                  <AlertTitle>Loading Python Environment</AlertTitle>
                  <AlertDescription>
                    Please wait while we initialize the calculation engine...
                  </AlertDescription>
                </Alert>
              )}

              {error && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              
              <div className="flex gap-2">
                <Button 
                  className="flex-1 h-12"
                  onClick={calculateResults}
                  disabled={loading || !pyodideReady}
                >
                  {loading ? (
                    <span className="flex items-center justify-center">
                      <svg className="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                      </svg>
                      Calculating...
                    </span>
                  ) : 'Calculate Optimal Parameters'}
                </Button>
                
                {results && (
                  <Button variant="outline" onClick={handleExport}>
                    <Download className="w-4 h-4 mr-2" />
                    Export CSV
                  </Button>
                )}
                
                {results && (
                  <Button variant="outline" onClick={handleGenerateReport}>
                    <Download className="w-4 h-4 mr-2" />
                    Generate Report
                  </Button>
                )}
              </div>
            </div>

            {results && (
              <div className="space-y-6">
                <div className="h-64 bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={results.pressure_profile}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis 
                        dataKey="distance"
                        label={{ value: 'Distance (mm)', position: 'bottom' }}
                      />
                      <YAxis 
                        label={{ 
                          value: 'Pressure (kPa)', 
                          angle: -90, 
                          position: 'left' 
                        }}
                      />
                      <Tooltip 
                        contentStyle={{
                          backgroundColor: 'rgba(255, 255, 255, 0.95)',
                          border: 'none',
                          borderRadius: '8px',
                          boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)',
                        }}
                        formatter={(value) => [`${value} kPa`, 'Pressure']}
                        labelFormatter={(value) => `Distance: ${value} mm`}
                      />
                      <Legend />
                      <Line 
                        type="monotone" 
                        dataKey="pressure" 
                        name="Pressure"
                        stroke="#6366f1"
                        strokeWidth={2}
                        dot={false}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <ResultCard
                    title="Required Injection Pressure"
                    value={results.required_pressure.toFixed(2)}
                    unit="kPa"
                  />
                  <ResultCard
                    title="Shear Rate"
                    value={results.shear_rate.toFixed(2)}
                    unit="s⁻¹"
                  />
                  <ResultCard
                    title="Apparent Viscosity"
                    value={results.apparent_viscosity.toFixed(4)}
                    unit="Pa·s"
                  />
                  <ResultCard
                    title="Reynolds Number"
                    value={results.reynolds_number.toFixed(2)}
                    unit=""
                  />
                </div>

                {results.warnings && results.warnings.length > 0 && (
                  <Alert variant="warning">
                    <AlertTriangle className="h-4 w-4" />
                    <AlertTitle>Process Warnings</AlertTitle>
                    <AlertDescription>
                      <ul className="mt-2 list-disc pl-5 space-y-1">
                        {results.warnings.map((warning, index) => (
                          <li key={index}>{warning}</li>
                        ))}
                      </ul>
                    </AlertDescription>
                  </Alert>
                )}

                <Alert>
                  <Info className="h-4 w-4" />
                  <AlertTitle>Flow Regime: {results.flow_regime === 'laminar' ? 'Laminar' : 'Turbulent'}</AlertTitle>
                  <AlertDescription>
                    {results.flow_regime === 'laminar' 
                      ? 'Flow is laminar (Reynolds number < 2300), which is ideal for controlled injection.' 
                      : 'Flow is turbulent (Reynolds number > 2300), which may lead to inconsistent filling.'}
                  </AlertDescription>
                </Alert>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default OptimizerPage;