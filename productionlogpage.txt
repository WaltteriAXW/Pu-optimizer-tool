import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { FileSpreadsheet, Download, Save, Trash2, Filter, Calendar, Info } from 'lucide-react';

interface ProductionRecord {
  timestamp: string;
  pipeLength: number;
  pipeThickness?: number;
  temperature: number;
  flowRate?: number;
  pressure: number;
  viscosity: number;
  reynoldsNumber: number;
}

const ProductionLogPage = () => {
  const [logs, setLogs] = useState<ProductionRecord[]>([]);
  const [filteredLogs, setFilteredLogs] = useState<ProductionRecord[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [statistics, setStatistics] = useState<{
    avgPressure: number;
    avgTemperature: number;
    avgViscosity: number;
    totalRecords: number;
  } | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  // Load logs from localStorage on component mount
  useEffect(() => {
    const savedLogs = localStorage.getItem('productionLogs');
    if (savedLogs) {
      try {
        const parsedLogs = JSON.parse(savedLogs);
        setLogs(parsedLogs);
      } catch (e) {
        console.error('Error parsing saved logs:', e);
      }
    }
  }, []);

  // Filter logs based on search query and date range
  useEffect(() => {
    let filtered = [...logs];
    
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(log => 
        Object.values(log).some(value => 
          String(value).toLowerCase().includes(query)
        )
      );
    }
    
    if (dateRange.start) {
      filtered = filtered.filter(log => 
        new Date(log.timestamp) >= new Date(dateRange.start)
      );
    }
    
    if (dateRange.end) {
      filtered = filtered.filter(log => 
        new Date(log.timestamp) <= new Date(dateRange.end)
      );
    }
    
    // Sort logs by timestamp (newest first)
    filtered = filtered.sort((a, b) => 
      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );
    
    setFilteredLogs(filtered);
    
    // Calculate statistics if we have filtered logs
    if (filtered.length > 0) {
      const stats = {
        avgPressure: filtered.reduce((sum, log) => sum + log.pressure, 0) / filtered.length,
        avgTemperature: filtered.reduce((sum, log) => sum + log.temperature, 0) / filtered.length,
        avgViscosity: filtered.reduce((sum, log) => sum + log.viscosity, 0) / filtered.length,
        totalRecords: filtered.length
      };
      setStatistics(stats);
    } else {
      setStatistics(null);
    }
  }, [logs, searchQuery, dateRange]);

  // Clear all logs
  const clearLogs = () => {
    setLogs([]);
    localStorage.removeItem('productionLogs');
    setShowDeleteConfirm(false);
  };

  // Export logs as CSV
  const downloadLogs = () => {
    if (filteredLogs.length === 0) return;

    const headers = [
      'Timestamp',
      'Pipe Length (mm)',
      'Pipe Thickness (mm)',
      'Temperature (°C)',
      'Pressure (kPa)',
      'Viscosity (Pa·s)',
      'Reynolds Number'
    ];

    const csvContent = [
      headers.join(','),
      ...filteredLogs.map(log => [
        new Date(log.timestamp).toLocaleString(),
        log.pipeLength,
        log.pipeThickness || 'N/A',
        log.temperature,
        log.pressure,
        log.viscosity,
        log.reynoldsNumber
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `production_logs_${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Generate detailed report
  const generateReport = () => {
    if (filteredLogs.length === 0) return;
    
    const reportContent = `Production Analysis Report
Generated: ${new Date().toLocaleString()}

Summary Statistics:
- Total Records: ${statistics?.totalRecords}
- Average Pressure: ${statistics?.avgPressure.toFixed(2)} kPa
- Average Temperature: ${statistics?.avgTemperature.toFixed(2)} °C
- Average Viscosity: ${statistics?.avgViscosity.toFixed(4)} Pa·s

${filteredLogs.length > 50 ? '(Showing first 50 records)' : 'Production Records:'}
${filteredLogs.slice(0, 50).map((log, index) => `
Record #${index + 1}
Timestamp: ${new Date(log.timestamp).toLocaleString()}
Pipe Length: ${log.pipeLength} mm
${log.pipeThickness ? `Pipe Thickness: ${log.pipeThickness} mm` : ''}
Temperature: ${log.temperature} °C
Pressure: ${log.pressure.toFixed(2)} kPa
Viscosity: ${log.viscosity.toFixed(4)} Pa·s
Reynolds Number: ${log.reynoldsNumber.toFixed(2)}
-------------------`).join('\n')}

Analysis:
- Flow Regime: ${filteredLogs.some(log => log.reynoldsNumber > 2300) ? 'Some records show turbulent flow' : 'All records show laminar flow'}
- Pressure Range: ${Math.min(...filteredLogs.map(log => log.pressure)).toFixed(2)} - ${Math.max(...filteredLogs.map(log => log.pressure)).toFixed(2)} kPa
- Temperature Range: ${Math.min(...filteredLogs.map(log => log.temperature)).toFixed(1)} - ${Math.max(...filteredLogs.map(log => log.temperature)).toFixed(1)} °C

This report was generated using the Polyurethane Injection Optimizer's Production Log tool.
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `production_report_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  // Format date for display
  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleString();
  };

  // Generate data for charts
  const getChartData = () => {
    // We'll limit to the last 10 records for the chart
    return filteredLogs.slice(0, 10).reverse();
  };

  return (
    <div className="p-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <FileSpreadsheet className="w-6 h-6" />
              Production Log
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={downloadLogs} disabled={filteredLogs.length === 0}>
                <Download className="w-4 h-4 mr-2" />
                Export CSV
              </Button>
              <Button variant="outline" onClick={generateReport} disabled={filteredLogs.length === 0}>
                <Save className="w-4 h-4 mr-2" />
                Generate Report
              </Button>
              {!showDeleteConfirm ? (
                <Button variant="destructive" onClick={() => setShowDeleteConfirm(true)} disabled={logs.length === 0}>
                  <Trash2 className="w-4 h-4 mr-2" />
                  Clear Logs
                </Button>
              ) : (
                <div className="flex gap-2">
                  <Button variant="destructive" onClick={clearLogs}>
                    Confirm
                  </Button>
                  <Button variant="outline" onClick={() => setShowDeleteConfirm(false)}>
                    Cancel
                  </Button>
                </div>
              )}
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            <div className="flex flex-wrap gap-4">
              <div className="flex-1 min-w-[200px]">
                <div className="flex items-center gap-2 mb-2">
                  <Filter className="w-4 h-4" />
                  <label className="text-sm font-medium">Search Logs</label>
                </div>
                <Input
                  placeholder="Search by any value..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full"
                />
              </div>
              
              <div className="flex-1 min-w-[200px]">
                <div className="flex items-center gap-2 mb-2">
                  <Calendar className="w-4 h-4" />
                  <label className="text-sm font-medium">Start Date</label>
                </div>
                <Input
                  type="date"
                  value={dateRange.start}
                  onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                  className="w-full"
                />
              </div>
              
              <div className="flex-1 min-w-[200px]">
                <div className="flex items-center gap-2 mb-2">
                  <Calendar className="w-4 h-4" />
                  <label className="text-sm font-medium">End Date</label>
                </div>
                <Input
                  type="date"
                  value={dateRange.end}
                  onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                  className="w-full"
                />
              </div>
            </div>

            {logs.length === 0 ? (
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  No production logs found. Use the optimization tool to generate logs.
                </AlertDescription>
              </Alert>
            ) : filteredLogs.length === 0 ? (
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  No logs match your search criteria. Try adjusting your filters.
                </AlertDescription>
              </Alert>
            ) : null}

            {statistics && (
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
                <Card className="p-4">
                  <h3 className="text-sm font-medium text-gray-500">Average Pressure</h3>
                  <p className="text-2xl font-bold">{statistics.avgPressure.toFixed(2)} kPa</p>
                </Card>
                <Card className="p-4">
                  <h3 className="text-sm font-medium text-gray-500">Average Temperature</h3>
                  <p className="text-2xl font-bold">{statistics.avgTemperature.toFixed(1)} °C</p>
                </Card>
                <Card className="p-4">
                  <h3 className="text-sm font-medium text-gray-500">Average Viscosity</h3>
                  <p className="text-2xl font-bold">{statistics.avgViscosity.toFixed(4)} Pa·s</p>
                </Card>
                <Card className="p-4">
                  <h3 className="text-sm font-medium text-gray-500">Total Records</h3>
                  <p className="text-2xl font-bold">{statistics.totalRecords}</p>
                </Card>
              </div>
            )}

            {filteredLogs.length > 0 && (
              <>
                <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4">
                  <h3 className="text-md font-medium mb-4">Production Trends</h3>
                  <div className="h-72">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={getChartData()}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis 
                          dataKey="timestamp" 
                          tickFormatter={(timestamp) => new Date(timestamp).toLocaleDateString()}
                          angle={-45}
                          textAnchor="end"
                          height={80}
                        />
                        <YAxis yAxisId="left" />
                        <YAxis yAxisId="right" orientation="right" />
                        <Tooltip 
                          labelFormatter={(timestamp) => new Date(timestamp).toLocaleString()}
                          formatter={(value, name) => {
                            if (name === 'Pressure') return [`${value} kPa`, name];
                            if (name === 'Temperature') return [`${value} °C`, name];
                            return [value, name];
                          }}
                        />
                        <Legend />
                        <Line
                          yAxisId="left"
                          type="monotone"
                          dataKey="pressure"
                          name="Pressure"
                          stroke="#8884d8"
                        />
                        <Line
                          yAxisId="right"
                          type="monotone"
                          dataKey="temperature"
                          name="Temperature"
                          stroke="#82ca9d"
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>

                <div className="overflow-x-auto rounded-md border">
                  <table className="w-full text-sm">
                    <thead className="bg-gray-50 dark:bg-gray-800">
                      <tr>
                        <th className="p-3 text-left">Timestamp</th>
                        <th className="p-3 text-left">Pipe Length</th>
                        <th className="p-3 text-left">Temperature</th>
                        <th className="p-3 text-left">Pressure</th>
                        <th className="p-3 text-left">Viscosity</th>
                        <th className="p-3 text-left">Reynolds</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y">
                      {filteredLogs.slice(0, 20).map((log, index) => (
                        <tr key={index} className={index % 2 === 0 ? 'bg-white dark:bg-gray-900' : 'bg-gray-50 dark:bg-gray-800/50'}>
                          <td className="p-3">{formatDate(log.timestamp)}</td>
                          <td className="p-3">{log.pipeLength} mm</td>
                          <td className="p-3">{log.temperature} °C</td>
                          <td className="p-3">{log.pressure.toFixed(2)} kPa</td>
                          <td className="p-3">{log.viscosity.toFixed(4)} Pa·s</td>
                          <td className="p-3">{log.reynoldsNumber.toFixed(2)}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                
                {filteredLogs.length > 20 && (
                  <div className="text-center text-sm text-gray-500">
                    Showing 20 of {filteredLogs.length} records. Export to CSV to view all data.
                  </div>
                )}
              </>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ProductionLogPage;